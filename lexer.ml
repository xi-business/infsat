# 1 "lexer.mll"
 
open Parser
exception LexError of string
let line_no = ref 1
let end_of_previousline = ref 0

# 9 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\227\255\229\255\011\000\232\255\233\255\234\255\
    \235\255\236\255\001\000\238\255\025\000\075\000\160\000\150\000\
    \034\000\001\000\254\255\002\000\231\255\253\255\036\000\020\000\
    \041\000\024\000\065\000\252\255\057\000\251\255\057\000\059\000\
    \056\000\250\255\018\000\149\000\148\000\147\000\143\000\218\000\
    \146\000\240\255\139\000\246\255\159\000\242\255\214\000\183\000\
    \175\000\186\000\207\000\209\000\228\255\218\000\222\000\239\255\
    \204\000\245\255\225\000\241\255\237\255\230\255\249\000\252\255\
    \253\255\000\000\012\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\029\000\255\255\255\255\255\255\
    \255\255\255\255\029\000\255\255\029\000\008\000\007\000\006\000\
    \029\000\029\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \012\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\000\000\046\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\063\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\018\000\019\000\000\000\019\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\019\000\000\000\000\000\012\000\000\000\000\000\
    \008\000\007\000\068\000\021\000\011\000\010\000\003\000\017\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\061\000\067\000\006\000\009\000\005\000\060\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\035\000\004\000\020\000\034\000\016\000\
    \053\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\024\000\022\000\030\000\
    \023\000\028\000\025\000\026\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\027\000\029\000\
    \031\000\032\000\013\000\033\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\036\000\037\000\038\000\039\000\046\000\044\000\
    \045\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\047\000\048\000\049\000\050\000\014\000\
    \002\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\042\000\051\000\052\000\054\000\056\000\
    \058\000\043\000\059\000\066\000\000\000\057\000\000\000\040\000\
    \065\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
    \055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\064\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\255\255\000\000\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\065\000\017\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\066\000\000\000\000\000\000\000\010\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\017\000\012\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\016\000\016\000\022\000\
    \016\000\023\000\024\000\025\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\026\000\028\000\
    \030\000\031\000\013\000\032\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\035\000\036\000\037\000\038\000\040\000\042\000\
    \044\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\046\000\047\000\048\000\049\000\014\000\
    \000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\039\000\050\000\051\000\053\000\054\000\
    \056\000\039\000\058\000\062\000\255\255\054\000\255\255\039\000\
    \062\000\255\255\255\255\255\255\039\000\255\255\255\255\255\255\
    \054\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\046\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\062\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 16 "lexer.mll"
    ( token lexbuf )
# 192 "lexer.ml"

  | 1 ->
# 18 "lexer.mll"
    ( end_of_previousline := (Lexing.lexeme_end lexbuf);
      line_no := !line_no+1;
      token lexbuf)
# 199 "lexer.ml"

  | 2 ->
# 22 "lexer.mll"
    ( comment lexbuf;
      token lexbuf )
# 205 "lexer.ml"

  | 3 ->
# 24 "lexer.mll"
          (CASE)
# 210 "lexer.ml"

  | 4 ->
# 25 "lexer.mll"
         (FUN)
# 215 "lexer.ml"

  | 5 ->
# 26 "lexer.mll"
           (DP)
# 220 "lexer.ml"

  | 6 ->
# 28 "lexer.mll"
   (let s = Lexing.lexeme lexbuf in
     INT(int_of_string s))
# 226 "lexer.ml"

  | 7 ->
# 31 "lexer.mll"
    ( let s = Lexing.lexeme lexbuf in
         NAME(s))
# 232 "lexer.ml"

  | 8 ->
# 34 "lexer.mll"
    ( let s = Lexing.lexeme lexbuf in
        NONTERM(s))
# 238 "lexer.ml"

  | 9 ->
# 37 "lexer.mll"
    (BEGING)
# 243 "lexer.ml"

  | 10 ->
# 39 "lexer.mll"
    (ENDG)
# 248 "lexer.ml"

  | 11 ->
# 41 "lexer.mll"
    (BEGINA)
# 253 "lexer.ml"

  | 12 ->
# 43 "lexer.mll"
    (ENDA)
# 258 "lexer.ml"

  | 13 ->
# 45 "lexer.mll"
    (BEGINATA)
# 263 "lexer.ml"

  | 14 ->
# 47 "lexer.mll"
    (ENDATA)
# 268 "lexer.ml"

  | 15 ->
# 49 "lexer.mll"
    (BEGINR)
# 273 "lexer.ml"

  | 16 ->
# 51 "lexer.mll"
    (ENDR)
# 278 "lexer.ml"

  | 17 ->
# 53 "lexer.mll"
    (COMMA)
# 283 "lexer.ml"

  | 18 ->
# 55 "lexer.mll"
    (ARROW)
# 288 "lexer.ml"

  | 19 ->
# 57 "lexer.mll"
    (ARROW)
# 293 "lexer.ml"

  | 20 ->
# 59 "lexer.mll"
    (LPAR)
# 298 "lexer.ml"

  | 21 ->
# 61 "lexer.mll"
    (RPAR)
# 303 "lexer.ml"

  | 22 ->
# 63 "lexer.mll"
    (LBRA)
# 308 "lexer.ml"

  | 23 ->
# 65 "lexer.mll"
    (RBRA)
# 313 "lexer.ml"

  | 24 ->
# 67 "lexer.mll"
    (AND)
# 318 "lexer.ml"

  | 25 ->
# 69 "lexer.mll"
    (OR)
# 323 "lexer.ml"

  | 26 ->
# 71 "lexer.mll"
    (PERIOD)
# 328 "lexer.ml"

  | 27 ->
# 73 "lexer.mll"
     (let s = Lexing.lexeme lexbuf in
      let s' = String.sub s 8 (String.length s - 14) in
        ML(s'))
# 335 "lexer.ml"

  | 28 ->
# 77 "lexer.mll"
    ( EOF )
# 340 "lexer.ml"

  | 29 ->
# 79 "lexer.mll"
    ( Format.eprintf "unknown token %s in line %d, column %d-%d @."
	(Lexing.lexeme lexbuf)
        (!line_no)
	((Lexing.lexeme_start lexbuf)- (!end_of_previousline))
	((Lexing.lexeme_end lexbuf)-(!end_of_previousline));
      failwith "lex error" )
# 350 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 62
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 87 "lexer.mll"
    ( () )
# 362 "lexer.ml"

  | 1 ->
# 89 "lexer.mll"
    ( comment lexbuf;
      comment lexbuf )
# 368 "lexer.ml"

  | 2 ->
# 92 "lexer.mll"
    (  print_string "Lex error: unterminated comment\n";
       failwith "unterminated comment" )
# 374 "lexer.ml"

  | 3 ->
# 95 "lexer.mll"
    ( comment lexbuf )
# 379 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

