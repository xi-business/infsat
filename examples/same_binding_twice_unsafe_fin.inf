(*
This is an example that makes 0-CFA detect application of the same sequence of terms to a
nonterminal, but from two different contexts and containing a variable. This is needed to
test some rare border cases when creating environments.

Basically, 0-CFA detects which sequences of terms are applied to which nonterminals. The
terms are grouped by context, so application

S -> NT t1 t2 t3

will detect a single sequence of terms in application NT [t1 t2 t3]. These terms are applied to
first, second, and third argument of nonterminal NT. Multiple sequences can occur only in
case of partial application, e.g.:

S -> NT1 t2 t3
where
NT1 -> NT2 t1

gives us application of two sequences of terms to nonterminal NT2 - NT2 [t1] [t2 t3].

There are some rare border cases that occur only when such a sequence contains variables
that are from the same nonterminal. These are tricky to construct, because simply writing

NT x x

would always construct a sequence [x x] instead of [x] [x].

This grammar achieves that border case by partially applying nonterminal D with [y], and then
completing the partial application with [y] in the same nonterminal in another call.
*)
Grammar.
S -> C a e.
C x y -> b (x y) (C (D y) y).
D x y -> x.
End.
