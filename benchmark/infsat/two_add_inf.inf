(*
Positive natural numbers Nat are defined by 1 and +, where numbers are kind of
like Church numbers.
Then, Swap function is created that swaps arguments of a 2-arg function.
Swap is composed with itself n times for each natural number n. It is used on
K and then e and (a e). So, every odd number has a branch that is counted.
There are infinitely many odd numbers iff this language is infinite.

This produces partially evaluated branches in the form
Zero f g x y
Add One (Add One ... (Add One Zero) ... ) K e (a (a ... (e) ... ))
and eventually fully evaluated branches
a^n e for odd n
*)

Grammar.
(* S : o *)
S -> Nat Swap K e e.
(* Nat : ((o -> o -> o) -> o -> o -> o) -> (o -> o -> o) -> o -> o -> o *)
Nat f g x y -> b (One f g x y) (Add Nat Nat f g x (a y)).
(* Add : (((o -> o -> o) -> o -> o -> o) -> (o -> o -> o) -> o -> o -> o) ->
         (((o -> o -> o) -> o -> o -> o) -> (o -> o -> o) -> o -> o -> o) ->
         ((o -> o -> o) -> o -> o -> o) ->
         (o -> o -> o) ->
         o -> o -> o *)
Add p q f g x y -> p f (q f g) x y.
(* Zero : ((o -> o -> o) -> o -> o -> o) -> (o -> o -> o) -> o -> o -> o *)
Zero f g x y -> g x y.
(* One : ((o -> o -> o) -> o -> o -> o) -> (o -> o -> o) -> o -> o -> o *)
One f g x y -> f g x y.
(* Swap : (o -> o -> o) -> o -> o -> o *)
Swap g x y -> g y x.
(* K : o -> o -> o *)
K x y -> x.
End.
